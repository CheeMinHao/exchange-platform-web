// import firebaseConfig from '/@/main.js'
// require('dotenv').config()
// const firebase = require('firebase')
import firebase from 'firebase/app';
import "firebase/firestore";

const firebaseConfig = ({
  apiKey: "AIzaSyCC7Yie3RZhusyEDS1U4Erp_pD3JTFBU1g",
  authDomain: "exchange-platform-92854.firebaseapp.com",
  projectId: "exchange-platform-92854",
  storageBucket: "exchange-platform-92854.appspot.com",
  messagingSenderId: "32159966574",
  appId: "1:32159966574:web:c85a16e2071999b7f00d7f",
  measurementId: "G-8LCWP241BR"
})

const firebaseApp = firebase.initializeApp(firebaseConfig);
const timestamp = firebase.firestore.FieldValue.serverTimestamp;

const db = firebaseApp.firestore()

//access to the root collection
const profileCollection = db.collection('userProfile')
// const productCollection = db.collection('products');

// const getUserProducts = async (document) => {
//   const products = await productCollection.get(document);
//   return products.data();
// };

const getUserProfile = async (userId) => {
  const userProfile = await profileCollection.where('user', '==', userId).get();
  if (!userProfile.exists) {
    console.log("This user does not exist!");
  } else {
    console.log('User Data:', userProfile.data());
    return userProfile.data();
  }
};

const createProfile = (profile) => {
  return profileCollection.add(profile);
};

const createProduct = (product, userId) => {
  return profileCollection
    .doc(userId) // with the ID from the root collection
    .collection('products') // access to the subcollection
    .add(product); // add data into the subcollection with an autogenerated ID
};

// module.exports = {
//   createProduct,
//   createProfile,
//   getUserProducts,
//   updateProduct, // use .update({}) to update existing product data
//   deleteProduct,
//   buyProduct,
//   deleteProfile,
//   updateProfile,
//   resetPassword
// };

// when call a function, need to pass firebase token (smth encrpyted) to the backend
// use firebase query
// use blockchain at later stage

// const main = async () => {
//     const productCreated = await createProduct()
//     console.log("ADDING")
//     console.log(productCreated.id)
//     // const products = await getUserProducts("")
//     // console.log(products)

// }

// main()
export { createProduct }

// export const getProduct = async id => {
//     const product = await productCollection.doc(id).get()
//     return product.exists ? product.data() : null
// }

// export const updateProduct = async id => {
//     productCollection.doc(id).update()
// }

// export const deleteProduct = async id => {
//     productCollection.doc(id).delete()
// }

// export const useLoadProducts = () => {
//     const products = ref([])
//     const close = productCollection.onSnapshot(snapshot => {
//         products.value = snapshot.docs.map(doc => ({ id: doc.id, ...doc,data() }))
//     })
//     onUnmounted(close)
//     return products
// }
